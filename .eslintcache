[{"C:\\Users\\JALE\\Documents\\my-movies\\src\\index.js":"1","C:\\Users\\JALE\\Documents\\my-movies\\src\\components\\App.js":"2","C:\\Users\\JALE\\Documents\\my-movies\\src\\components\\MovieList.js":"3","C:\\Users\\JALE\\Documents\\my-movies\\src\\components\\SearchBar.js":"4"},{"size":295,"mtime":1611082268041,"results":"5","hashOfConfig":"6"},{"size":3408,"mtime":1611691146057,"results":"7","hashOfConfig":"6"},{"size":1569,"mtime":1611691259923,"results":"8","hashOfConfig":"6"},{"size":962,"mtime":1611692808726,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},"wcenr2",{"filePath":"13","messages":"14","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"15","usedDeprecatedRules":"12"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"C:\\Users\\JALE\\Documents\\my-movies\\src\\index.js",[],["21","22"],"C:\\Users\\JALE\\Documents\\my-movies\\src\\components\\App.js",["23"],"import React from \"react\";\nimport MovieList from \"./MovieList\";\nimport SearchBar from \"./SearchBar\";\nimport axios from \"axios\";\nrequire('dotenv').config();\n\n\n\nclass App extends React.Component {\n  state = {\n    movies: [],\n    searchQuery:\"\"\n  };\n  \n//fetch'den gelen promiseleri asenkron yapıyı kabul etmek için async ve await kullandık\n  // async componentDidMount() {\n  //   //verilerimizin olduğu yer URL\n  //   const baseURL = \"http://localhost:3002/movies\";\n  //   const response = await fetch(baseURL);\n  //   console.log(response)\n  //   //response.json demek; gelen veri json formatında olsun.\n  //   const data = await response.json();\n  //   console.log(data)\n  //   //gelen data'yı movies'in içine yerleştirdik.\n  //   this.setState({movies: data})\n  // }\n\n  //axios ile tek seferde verileri json formatında aldık.\n  //yukarındankinden farkı response fetch kullanmadık. response ile çevirmemize de gerek kalmadan direkt dataya ulaştık\n\n\n\n  async componentDidMount() {\n    // 1.const populer filmlerden çektiğimiz apı, 2.ise bizim kendi oluşturduğumuz moviedb deki listemiz.\n     const response = await axios.get(`https://api.themoviedb.org/3/movie/popular?api_key=${process.env.REACT_APP_API_KEY}&language=en-US&page=1`);\n   // const response = await axios.get(`https://api.themoviedb.org/3/list/7073237?api_key=${process.env.REACT_APP_API_KEY}&language=en-US`);\n    //console.log(response.data.items);\n    this.setState({ movies: response.data.results})\n  }\n\n\n\n\n  deleteMovie = (movie) => {\n     const newMovieList = this.state.movies.filter((m) => m.id !== movie.id);\n  }\n\n  //FETCH API\n  // deleteMovie = async (movie) => {\n  //   const baseURL = `http://localhost:3002/movies/${movie.id}`\n  //   await fetch(baseURL, {\n  //     method:\"DELETE\"\n  //   })\n  //    const newMovieList = this.state.movies.filter((m) => m.id !== movie.id);\n\n\n//AXİOS API\n   deleteMovie = async (movie) => {\n     axios.post(`https://api.themoviedb.org/3/list/7073237/remove_item?media_id=${movie.id}&session_id=${process.env.REACT_APP_SESSION_ID}&api_key=${process.env.REACT_APP_API_KEY}`)\n      const newMovieList = this.state.movies.filter((m) => m.id !== movie.id);\n     \n\n    //movies'i NewMovieList olarak değiştirdik. Elimizde film bilgisi olmasaydı bunu kullanırdık.\n    // this.setState({\n    //   movies: newMovieList\n    // })\n\n    // Yukarıdakine alternatif, diğer yol.\n    this.setState((state) => ({\n      movies: newMovieList,\n    }));\n\n\n    }\n  searchMovie = (event) => {\n//search butonunda yazı yazdığımız değerler\n    //console.log(event.target.value)\n\n   //state'i update ettik. Her değişiklik yaptığımızda uptade etmiş olacağız.\n    this.setState({searchQuery: event.target.value})\n\n  }\n  \n  render() {\n\n    let filteredMovies = this.state.movies.filter(\n      (movie) => {\n        return movie.title.toLowerCase().indexOf(this.state.searchQuery.toLowerCase()) !== -1\n      }\n    )\n\n    return (\n      <div className=\"mt-3\">\n        <div className=\"container\">\n          <div className=\"row\">\n            <div className=\"col-lg-12 mb-5\">\n              <SearchBar searchMovieProp= {this.searchMovie} />\n            </div>\n          </div>\n          <MovieList\n            movies={filteredMovies} \n            deleteMovieProp={this.deleteMovie} //delete'i propslayacağız\n          />\n        </div>\n      </div>\n    \n    );\n  }\n\n}\nexport default App;\n","C:\\Users\\JALE\\Documents\\my-movies\\src\\components\\MovieList.js",[],"C:\\Users\\JALE\\Documents\\my-movies\\src\\components\\SearchBar.js",[],["24","25"],{"ruleId":"26","replacedBy":"27"},{"ruleId":"28","replacedBy":"29"},{"ruleId":"30","severity":1,"message":"31","line":45,"column":12,"nodeType":"32","messageId":"33","endLine":45,"endColumn":24},{"ruleId":"26","replacedBy":"34"},{"ruleId":"28","replacedBy":"35"},"no-native-reassign",["36"],"no-negated-in-lhs",["37"],"no-unused-vars","'newMovieList' is assigned a value but never used.","Identifier","unusedVar",["36"],["37"],"no-global-assign","no-unsafe-negation"]